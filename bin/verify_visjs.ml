let _stack_pattern_transformer patterns_filename transformer =
    match patterns_filename with
    | None -> transformer
    | Some filename -> 
        let patterns = Ssp_bridge.Parsing.parse_destingation_patterns filename in
        Ssp_verification.Phase1.ResultTransformer.stack
                (Ssp_verification.Phase1.BasicTransformers.disqualify_results_if_pattern_detected patterns)
                transformer
let help () = 
  print_endline 
  "
  This program verifies a scenario (defined by a walk generated by the Ssp library) by constructing its successive states.
  It also saves the results in the form acceptable by a frontend using visjs library.
  
  If you see this message it means that you did not provide necessary number of arguments.
  Arguments required for this program are:
  Arg1 - the name of a file containing a configuration parameters for this program (created manually).
  Arg2 - the name of a file containing discovered states (generated by Trackign_bigraph library).
  Arg3 - the name of a file with normalized transitions (generated by this Ssp_bridge library).
  Arg4 - the name of a file with a walk defining behavior policy.
  Arg5 - the number of agents in the system.
  Arg6 - (optional) the name of a file with patterns that if one of them is detected in one of the contructed states the verified scenario will be marked as invalid.
  "
let () = 
    if Array.length Sys.argv >= 6 then
        let raw_config_filename = Sys.argv.(1)
        and states_filename = Sys.argv.(2)
        and trans_filename = Sys.argv.(3)
        and walk_filename = Sys.argv.(4)
        and number_of_agents = Sys.argv.(5) |> int_of_string 
        and patterns_filename = if Array.length Sys.argv > 6 then Some Sys.argv.(6) else None in
        let raw_config = Yojson.Safe.from_file raw_config_filename |> [%of_yojson: Ssp_verification.Frontend.config_raw] in
        let main_config = Ssp_verification.Frontend.convert raw_config in
        let states = Tracking_bigraph.TTS.import_states states_filename
        and trans = Tracking_bigraph.TTS.import_transitions ~headers_in_first_row:false trans_filename
        and walk = Ssp.Frontend.import_trans_funs walk_filename 
        and timeline_config = Ssp_verification.Frontend.make_visjs_timeline_config main_config
        and serialization_config = Ssp_verification.Frontend.make_visjs_serialization_config main_config in
        let init_output = Ssp_verification.Frontend.make_output_info main_config in
        let states_mapped_by_idx = Ssp_verification.Frontend.map_states_to_idx states
        and trans_mapped_by_idx = Ssp_verification.Frontend.map_trans_to_idx trans
        and trans_mapped_by_key = Ssp_verification.Frontend.map_trans_to_key trans
        and transformer =
            Ssp_verification.Phase1.ResultTransformer.stack
                (Ssp_verification.Visjs.transformer_save_state serialization_config)
                (Ssp_verification.Visjs.transformer_save_timeline timeline_config)
            |>
            Ssp_verification.Phase1.ResultTransformer.stack
                (Ssp_verification.Phase1.BasicTransformers.save_or_update_output 
                    init_output 
                    (Ssp_verification.Phase1.output_filename main_config.special_name)
                )
            |>
            _stack_pattern_transformer patterns_filename
    in
    ignore (
        Ssp_verification.Phase1.perform_phase 
            walk 
            ~num_of_agents:number_of_agents 
            states_mapped_by_idx 
            trans_mapped_by_idx 
            trans_mapped_by_key 
            transformer )
            ; ()
    else
        help ()
        